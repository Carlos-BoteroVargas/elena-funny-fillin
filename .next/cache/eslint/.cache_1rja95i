[{"C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\layout.js":"1","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\page.js":"2","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\arcade\\page.jsx":"3","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\stars\\page.jsx":"4","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\theatre\\page.jsx":"5","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\components\\Navbar.jsx":"6"},{"size":435,"mtime":1700579348807,"results":"7","hashOfConfig":"8"},{"size":951,"mtime":1700583642885,"results":"9","hashOfConfig":"8"},{"size":8049,"mtime":1700578453099,"results":"10","hashOfConfig":"8"},{"size":7968,"mtime":1700576047685,"results":"11","hashOfConfig":"8"},{"size":6208,"mtime":1700516792243,"results":"12","hashOfConfig":"8"},{"size":652,"mtime":1700579371492,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gh2ddz",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\layout.js",[],[],"C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\page.js",[],[],"C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\arcade\\page.jsx",["35"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport './arcade.css';\r\n\r\nexport default function Arcade() {\r\n  const [goBack, setGoBack] = useState(false);\r\n\r\n  const [inputFields, setInputFields] = useState({\r\n    relative: null,\r\n    celebrity: null,\r\n    bodyPart: null,\r\n    verb: null,\r\n    verb2: null,\r\n    spookyThing: null,\r\n    animal: null,\r\n    badGuy: null,\r\n    verb3: null,\r\n    largeNumber: null,\r\n    verb4: null,\r\n    verb5: null,\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const validateValues = (inputValues) => {\r\n    let errors = {};\r\n    const errorMessage = \"please fill this value!\"\r\n    if (!inputValues.relative) {\r\n      errors.relative = errorMessage\r\n    }\r\n    if (!inputValues.celebrity) {\r\n      errors.celebrity = errorMessage\r\n    }\r\n    if (!inputValues.bodyPart) {\r\n      errors.bodyPart = errorMessage\r\n    }\r\n    if (!inputValues.verb) {\r\n      errors.verb = errorMessage\r\n    }\r\n    if (!inputValues.verb2) {\r\n      errors.verb2 = errorMessage\r\n    }\r\n    if (!inputValues.spookyThing) {\r\n      errors.spookyThing = errorMessage\r\n    }\r\n    if (!inputValues.animal) {\r\n      errors.animal = errorMessage\r\n    }\r\n    if (!inputValues.badGuy) {\r\n      errors.badGuy = errorMessage\r\n    }\r\n    if (!inputValues.verb3) {\r\n      errors.verb3 = errorMessage\r\n    }\r\n    if (!inputValues.largeNumber) {\r\n      errors.largeNumber = errorMessage\r\n    }\r\n    if (!inputValues.verb4) {\r\n      errors.verb4 = errorMessage\r\n    }\r\n    if (!inputValues.verb5) {\r\n      errors.verb5 = errorMessage\r\n    }\r\n    return errors\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setInputFields({...inputFields , [e.target.name]: e.target.value });\r\n    console.log(inputFields)\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    console.log(`This is the event value ${event.target.className}`);\r\n    event.preventDefault();\r\n    setErrors(validateValues(inputFields));\r\n    setSubmitting(true);\r\n  }\r\n\r\n  const finishSubmit = () => {\r\n    if (!goBack) setGoBack(true)\r\n    else {\r\n      setSubmitting(false)\r\n      setGoBack(false)\r\n      setInputFields({\r\n        place: null,\r\n        noun: null,\r\n        noun2: null,\r\n        verb: null,\r\n        verb2: null,\r\n        adverb: null,\r\n        animal: null,\r\n        exclamation: null,\r\n        poison: null,\r\n        largeNumber: null,\r\n        smallNumber: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && submitting) {\r\n      finishSubmit();\r\n      // setGoBack(true)\r\n    }\r\n  }, [errors]);\r\n\r\n  const See = () => {\r\n          return (\r\n          <>\r\n            <button \r\n              className={(!goBack) ? 'btn-toggle' : 'btn-toggle-back'} \r\n              onClick={handleSubmit}\r\n              >\r\n              {!goBack ? \"See the story\" : \"Start again\" }\r\n            </button>\r\n          </>\r\n      ) \r\n  }\r\n\r\n\r\n\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <div className='cards'>\r\n        { (Object.keys(errors).length === 0 && submitting) ? (\r\n            <div className='content'>\r\n              <p>\r\n                The Arcade is so fun. That is where <b>{inputFields.relative}</b> and I were going. The host, <b>{inputFields.celebrity}</b>, asked me: <em>“Would you like to come with me? It would be very <b>{inputFields.verb}</b>.”</em> I decided to go along, so I got in their car which started to go at <b>{inputFields.largeNumber}</b> miles per hour. We drove right into the <b>{inputFields.spookyThing}</b> tunnel. \r\n\r\n                I realized my driver was <b>{inputFields.badGuy}</b>! My only chance was to <b>{inputFields.verb2}</b> out of the car. I <b>{inputFields.verb3}</b> out, but a <b>{inputFields.animal} {inputFields.verb4}</b> me. I didn&apos;t know what I should do, so I <b>{inputFields.verb5} {inputFields.badGuy}</b> in their <b>{inputFields.bodyPart}</b> and ran out of the tunnel. What can I say but, <em>“job well done!”</em>\r\n              </p>\r\n            </div>\r\n            ) : (\r\n              <div className='inputs'>\r\n                <p>\r\n                  To read the Arcade story, <br />fill in the blanks.\r\n                </p>\r\n                <div className={errors.relative ? \"error\" : \"\"}>Name of relative: {errors.relative ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='relative' type='text' value={inputFields.relative} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.celebrity ? \"error\" : \"\"}>Name of Celebrity: {errors.celebrity ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='celebrity' type='text' value={inputFields.celebrity} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.spookyThing ? \"error\" : \"\"}>spookyThing: {errors.spookyThing ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='spookyThing' type='text' value={inputFields.spookyThing} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.verb ? \"error\" : \"\"}>Adjective: {errors.verb ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb' type='text' value={inputFields.verb} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.verb3 ? \"error\" : \"\"}>Past tense verb: {errors.verb3 ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb3' type='text' value={inputFields.verb3} onChange={handleChange}/>\r\n                </div>\r\n                \r\n                <div className={errors.bodyPart ? \"error\" : \"\"}>Body part: {errors.bodyPart ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='bodyPart' type='text' value={inputFields.bodyPart} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.verb2 ? \"error\" : \"\"}>Past tense verb: {errors.verb2 ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb2' type='text' value={inputFields.verb2} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.verb5 ? \"error\" : \"\"}>another past tense verb: {errors.verb5 ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb5' type='text' value={inputFields.verb5} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.animal ? \"error\" : \"\"}>Animal: {errors.animal ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='animal' type='text' value={inputFields.animal} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.badGuy ? \"error\" : \"\"}>A Bad Guy: {errors.badGuy ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='badGuy' type='text' value={inputFields.badGuy} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.largeNumber ? \"error\" : \"\"}>Large Number: {errors.largeNumber ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='largeNumber' type='text' value={inputFields.largeNumber} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.verb4 ? \"error\" : \"\"}>Past tense verb: {errors.verb4 ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb4' type='text' value={inputFields.verb4} onChange={handleChange}/>\r\n                </div>\r\n\r\n              </div>\r\n            )\r\n        }\r\n      </div>\r\n      <div>\r\n        <See />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\stars\\page.jsx",["36"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport './stars.css';\r\n\r\nexport default function Stars() {\r\n  const [goBack, setGoBack] = useState(false);\r\n\r\n  const [inputFields, setInputFields] = useState({\r\n    place: null,\r\n    noun: null,\r\n    noun2: null,\r\n    verb: null,\r\n    verb2: null,\r\n    adverb: null,\r\n    animal: null,\r\n    exclamation: null,\r\n    measure: null,\r\n    poison: null,\r\n    largeNumber: null,\r\n    smallNumber: null,\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const validateValues = (inputValues) => {\r\n    let errors = {};\r\n    const errorMessage = \"please fill this value!\"\r\n    if (!inputValues.place) {\r\n      errors.place = errorMessage\r\n    }\r\n    if (!inputValues.noun) {\r\n      errors.noun = errorMessage\r\n    }\r\n    if (!inputValues.noun2) {\r\n      errors.noun2 = errorMessage\r\n    }\r\n    if (!inputValues.verb) {\r\n      errors.verb = errorMessage\r\n    }\r\n    if (!inputValues.verb2) {\r\n      errors.verb2 = errorMessage\r\n    }\r\n    if (!inputValues.adverb) {\r\n      errors.adverb = errorMessage\r\n    }\r\n    if (!inputValues.animal) {\r\n      errors.animal = errorMessage\r\n    }\r\n    if (!inputValues.exclamation) {\r\n      errors.exclamation = errorMessage\r\n    }\r\n    if (!inputValues.measure) {\r\n      errors.measure = errorMessage\r\n    }\r\n    if (!inputValues.poison) {\r\n      errors.poison = errorMessage\r\n    }\r\n    if (!inputValues.largeNumber) {\r\n      errors.largeNumber = errorMessage\r\n    }\r\n    if (!inputValues.smallNumber) {\r\n      errors.smallNumber = errorMessage\r\n    }\r\n    return errors\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setInputFields({...inputFields , [e.target.name]: e.target.value });\r\n    console.log(inputFields)\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    console.log(`This is the event value ${event.target.className}`);\r\n    event.preventDefault();\r\n    setErrors(validateValues(inputFields));\r\n    setSubmitting(true);\r\n  }\r\n\r\n  const finishSubmit = () => {\r\n    if (!goBack) setGoBack(true)\r\n    else {\r\n      setSubmitting(false)\r\n      setGoBack(false)\r\n      setInputFields({\r\n        place: null,\r\n        noun: null,\r\n        noun2: null,\r\n        verb: null,\r\n        verb2: null,\r\n        adverb: null,\r\n        animal: null,\r\n        exclamation: null,\r\n        measure: null,\r\n        poison: null,\r\n        largeNumber: null,\r\n        smallNumber: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && submitting) {\r\n      finishSubmit();\r\n      // setGoBack(true)\r\n    }\r\n  }, [errors]);\r\n\r\n    const See = () => {\r\n          return (\r\n          <>\r\n            <button \r\n              className={(!goBack) ? 'btn-toggle' : 'btn-toggle-back'} \r\n              onClick={handleSubmit}\r\n              >\r\n              {!goBack ? \"See the story\" : \"Start again\" }\r\n            </button>\r\n          </>\r\n      ) \r\n  }\r\n\r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <div className='cards'>\r\n        { (Object.keys(errors).length === 0 && submitting) ? (\r\n            <div className='content'>\r\n              <p>\r\n              I was going to <b>{inputFields.place}</b>, when I saw a star. <em>“What?!“</em>, I said, <em>“That can&apos;t be a star!”</em>. I made a wish on the star, and a <b>{inputFields.animal}</b> started to talk: <em>“<b>{inputFields.exclamation}</b>, I can talk!”</em> But then it started to laugh <b>{inputFields.adverb}</b>. I ran away, but suddenly <b>{inputFields.largeNumber} {inputFields.animal}s</b> started to follow me. My <b>{inputFields.noun}</b> was <b>{inputFields.smallNumber} {inputFields.measure}</b> away, so I <b>{inputFields.verb}</b> to it, grabbed the <b>{inputFields.poison}</b> and put it all over the <b>{inputFields.noun2}</b>. When they tried to attack, the army <b>{inputFields.verb2}</b> in. I AM SAVED!!\r\n              </p>\r\n            </div>\r\n            ) : (\r\n              <div className='inputs'>\r\n                <p>\r\n                  To read this story, fill in the blanks.\r\n                </p>\r\n                <div className={errors.place ? \"error\" : \"\"}>Famous place: {errors.place ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='place' type='text' value={inputFields.place} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.noun ? \"error\" : \"\"}>Noun, used to store things: {errors.noun ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='noun' type='text' value={inputFields.noun} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.measure ? \"error\" : \"\"}>Unit of length, plural: {errors.measure ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='measure' type='text' value={inputFields.measure} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.poison ? \"error\" : \"\"}>Poison: {errors.poison ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='poison' type='text' value={inputFields.poison} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.verb ? \"error\" : \"\"}>Past tense verb: {errors.verb ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb' type='text' value={inputFields.verb} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.smallNumber ? \"error\" : \"\"}>Small number: {errors.smallNumber ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='smallNumber' type='text' value={inputFields.smallNumber} onChange={handleChange}/>\r\n                </div>\r\n                \r\n                <div className={errors.exclamation ? \"error\" : \"\"}>Silly exclamation: {errors.exclamation ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='exclamation' type='text' value={inputFields.exclamation} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.verb2 ? \"error\" : \"\"}>Past tense verb: {errors.verb2 ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb2' type='text' value={inputFields.verb2} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.adverb ? \"error\" : \"\"}>Adverb, ending in &apos;ly&apos;: {errors.adverb ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='adverb' type='text' value={inputFields.adverb} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.animal ? \"error\" : \"\"}>Big animal: {errors.animal ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='animal' type='text' value={inputFields.animal} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.noun2 ? \"error\" : \"\"}>Noun, plural: {errors.noun2 ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='noun2' type='text' value={inputFields.noun2} onChange={handleChange}/>\r\n                </div>\r\n\r\n                <div className={errors.largeNumber ? \"error\" : \"\"}>Large Number: {errors.largeNumber ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='largeNumber' type='text' value={inputFields.largeNumber} onChange={handleChange}/>\r\n                </div>\r\n\r\n              </div>\r\n            )\r\n        }\r\n      </div>\r\n      <div>\r\n        <See />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\theatre\\page.jsx",["37"],[],"'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport './theatre.css';\r\n\r\nexport default function Theatre() {\r\n  const [goBack, setGoBack] = useState(false);\r\n\r\n  const [inputFields, setInputFields] = useState({\r\n    friend: null,\r\n    relative: null,\r\n    relation: null,\r\n    verb: null,\r\n    verb2: null,\r\n    adverb: null,\r\n    animal: null,\r\n    exclamation: null,\r\n  });\r\n\r\n  const [errors, setErrors] = useState({});\r\n  const [submitting, setSubmitting] = useState(false);\r\n\r\n  const validateValues = (inputValues) => {\r\n    let errors = {};\r\n    const errorMessage = \"please fill this value!\"\r\n    if (!inputValues.friend) {\r\n      errors.friend = errorMessage\r\n    }\r\n    if (!inputValues.relative) {\r\n      errors.relative = errorMessage\r\n    }\r\n    if (!inputValues.relation) {\r\n      errors.relation = errorMessage\r\n    }\r\n    if (!inputValues.verb) {\r\n      errors.verb = errorMessage\r\n    }\r\n    if (!inputValues.verb2) {\r\n      errors.verb2 = errorMessage\r\n    }\r\n    if (!inputValues.adverb) {\r\n      errors.adverb = errorMessage\r\n    }\r\n    if (!inputValues.animal) {\r\n      errors.animal = errorMessage\r\n    }\r\n    if (!inputValues.exclamation) {\r\n      errors.exclamation = errorMessage\r\n    }\r\n    return errors\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    setInputFields({...inputFields , [e.target.name]: e.target.value });\r\n    console.log(inputFields)\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    console.log(`This is the event value ${event.target.className}`);\r\n    event.preventDefault();\r\n    setErrors(validateValues(inputFields));\r\n    setSubmitting(true);\r\n  }\r\n\r\n  const finishSubmit = () => {\r\n    if (!goBack) setGoBack(true)\r\n    else {\r\n      setSubmitting(false)\r\n      setGoBack(false)\r\n      setInputFields({\r\n        place: null,\r\n        noun: null,\r\n        noun2: null,\r\n        verb: null,\r\n        verb2: null,\r\n        adverb: null,\r\n        animal: null,\r\n        exclamation: null,\r\n        poison: null,\r\n        largeNumber: null,\r\n        smallNumber: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (Object.keys(errors).length === 0 && submitting) {\r\n      finishSubmit();\r\n      // setGoBack(true)\r\n    }\r\n  }, [errors]);\r\n\r\n  const See = () => {\r\n          return (\r\n          <>\r\n            <button \r\n              className={(!goBack) ? 'btn-toggle' : 'btn-toggle-back'} \r\n              onClick={handleSubmit}\r\n              >\r\n              {!goBack ? \"See the story\" : \"Start again\" }\r\n            </button>\r\n          </>\r\n      ) \r\n  }\r\n\r\n  \r\n  return (\r\n    \r\n    <div className=\"App\">\r\n      <div className='cards'>\r\n        { (Object.keys(errors).length === 0 && submitting) ? (\r\n            <div className='content'>\r\n              <p>\r\n                <b>{inputFields.friend}</b> and I were going to he theatre, when we met <b>{inputFields.relative}</b>. <em>&quot;Hello, Sunny! Watcha doin? <b>{inputFields.verb}</b>?&quot;, he said.</em> I didn&apos;t know what to do, so I said <b>{inputFields.adverb}</b> <em>&quot;Kick your butt, <b>{inputFields.animal}</b>!&quot;</em>.\r\n                Then my <b>{inputFields.relation}</b> showed up, and in a loud voice said <em>&quot;<b>{inputFields.exclamation}</b>!&quot;</em> I <b>{inputFields.verb2}</b> to the nearest bus stop, and so did <b>{inputFields.friend}</b>. Now that was some crazy day!\r\n              </p>\r\n            </div>\r\n            ) : (\r\n              <div className='inputs'>\r\n                <p>\r\n                  To want to read the Theatre story, <br /> fill in the blanks:\r\n                </p>\r\n                <div className={errors.friend ? \"error\" : \"\"}>Friend&apos;s Name: {errors.friend ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='friend' type='text' value={inputFields.friend} onChange={handleChange}/>\r\n                </div>\r\n                <div className={errors.relative ? \"error\" : \"\"}>Relative&apos;s name: {errors.relative ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='relative' type='text' value={inputFields.relative} onChange={handleChange}/>\r\n                </div>\r\n                <div className={errors.relation ? \"error\" : \"\"}>His/her relation to you: {errors.relation ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='relation' type='text' value={inputFields.relation} onChange={handleChange}/>\r\n                </div>\r\n                <div className={errors.verb ? \"error\" : \"\"}>Verb, ending in &apos;ing&apos;: {errors.verb ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb' type='text' value={inputFields.verb} onChange={handleChange}/>\r\n                </div>\r\n                <div className={errors.verb2 ? \"error\" : \"\"}>Past tense verb: {errors.verb2 ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='verb2' type='text' value={inputFields.verb2} onChange={handleChange}/>\r\n                </div>\r\n                <div className={errors.adverb ? \"error\" : \"\"}>Adverb, ending in &apos;ly&apos;: {errors.adverb ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='adverb' type='text' value={inputFields.adverb} onChange={handleChange}/>\r\n                </div>\r\n                <div className={errors.animal ? \"error\" : \"\"}>Scary animal: {errors.animal ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='animal' type='text' value={inputFields.animal} onChange={handleChange}/>\r\n                </div>\r\n                <div className={errors.exclamation ? \"error\" : \"\"}>Silly exclamation: {errors.exclamation ? <em className='error'>*required</em> : null}<br />\r\n                  <input className='input' size=\"30\" name='exclamation' type='text' value={inputFields.exclamation} onChange={handleChange}/>\r\n                </div>\r\n              </div>\r\n            )\r\n        }\r\n      </div>\r\n      <div>\r\n        <See />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\cBote\\Documents\\code\\elena-funny-fillin\\src\\app\\components\\Navbar.jsx",[],[],{"ruleId":"38","severity":1,"message":"39","line":107,"column":6,"nodeType":"40","endLine":107,"endColumn":14,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"39","line":108,"column":6,"nodeType":"40","endLine":108,"endColumn":14,"suggestions":"42"},{"ruleId":"38","severity":1,"message":"39","line":91,"column":6,"nodeType":"40","endLine":91,"endColumn":14,"suggestions":"43"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'finishSubmit' and 'submitting'. Either include them or remove the dependency array.","ArrayExpression",["44"],["45"],["46"],{"desc":"47","fix":"48"},{"desc":"47","fix":"49"},{"desc":"47","fix":"50"},"Update the dependencies array to be: [errors, finishSubmit, submitting]",{"range":"51","text":"52"},{"range":"53","text":"52"},{"range":"54","text":"52"},[2587,2595],"[errors, finishSubmit, submitting]",[2603,2611],[2198,2206]]